'use strict'
/**
 * В синхронном коде во время его исполнения все операции выполняются построчно
 * в основнойм потоке.
 * Из-за этого при более сложной операции, когда движку надо время, весь код ниже 
 * блокируется и ждет исполнения этой операции.
 * 
 * В ассинхронном коде, движок не ждет исполнения ассинхронной операции, а исполняет 
 * код дальше. асинхронный код как-бы выноситься из основного потока и выполнется
 * на стороне.
 * 
 * Заметим тот факт, что в JS есть только одит поток исполнения операций.
 * Можно конечно восоздать многопоточность с помощью веб-воркеров.
 * Но все равно это уже какие-то доп вещи, и они испл. не так часто
 * И не путаем ассинхронность и многопоточность.
 * 
 * Конкурентность - за промежуток времени выполниться N задач. Может выполняться
 *  в одном потоке.
 * 
 * Параллельность - частный случай конкурентности, когда у нас обязательно
 *  испольлняюся задачи в разных параллелях. Т.е. за каждую
 *  задачу отвечает кто-то другой. и выполняет параллельно
 * 
 * Многопоточность - способ реализации конкурентного выполнения выделением 
 *  рабочих потоков
 * 
 * Ассинхронная операция - это передача операции для выполнения на стороне.
 * В частности в JS мы делегируем асинк операцию в WEB API
 * При этом кому-то нужно еще дополнительно разруливать завершения работы WEP API.
 * Этим занимается Event Loop
 */
