'use strict'

// Концепция того, что у нас есть некоторая заготовка нашего объекта, которую мы можем превращать
// в неограниченное число инстансов, реализуется с помощью наследования пототипов.
// По сути все объекты в JS связаны со своим прототипом. При этом важным отличием от других языков
// является то, что при создании нового инстанса какого-то объекта( наприм. массива).
// Он не копирует все методы массива, а использует прототип
// То е сть происходит не копирование, а переиспользование/линкование от исходного прототипа нашего объекта.

const a = [1]
console.dir(a)
// Когда мы с вами создаем массив,
// мы получаем возможность доступа ко всем методам,существующим в прототипе массива.

// Как использовать:
// - Constructor functions - с начала создания JS
// - ES6 Classes - пришли с ES6, дают доп возможности для описания классов(более понятным методом)
//   Сожно услышвть, что классы - синтаксический сахар над обычным прототипным созданием через конструктор.
//   Но это не совсем корректно. Есть некоторые отличия реализации классов от контруктора.
//   Поэтому это не чистый  синт.сахар.
// - Object.create() - не очень исплз

